[cache]
type = "file"
basepath = "cache"

[[providers]]
name = "osm2pgsql"
type = "postgis"
host = "/var/run/postgresql" # Default for Debian-based distributions
port = 5432                     # postgis database port
database = "gis"        # postgis database name
user = ""
password = ""

[[providers.layers]]
name = "ne_water"
geometry_fieldname = "way"
geometry_type = "Polygon"
sql = """
SELECT
    ST_AsBinary(ST_SimplifyPreserveTopology(way, pixel_size(!ZOOM!)*.25)) AS way
  FROM ne_ocean
  WHERE way && !BBOX!
UNION ALL
SELECT
    ST_AsBinary(way) AS way
  FROM ne_lake
  WHERE way && !BBOX!
"""

[[providers.layers]]
name = "lz_water"
geometry_fieldname = "way"
geometry_type = "Polygon"
sql = """
SELECT
    ST_AsBinary(ST_SimplifyPreserveTopology(way, pixel_size(!ZOOM!)*.25)) AS way,
    NULL as osm_id
  FROM simplified_ocean_polygons
  WHERE way && !BBOX!
UNION ALL
SELECT
    ST_AsBinary(ST_SimplifyPreserveTopology(way, pixel_size(!ZOOM!)*.25)) AS way,
    osm_id
  FROM planet_osm_polygon
  WHERE way && !BBOX!
    AND (waterway = 'riverbank'
      OR landuse = 'reservoir'
      OR "natural" = 'water')
    AND way_area > pixel_area(!ZOOM!)*0.25
"""

[[providers.layers]]
name = "water"
geometry_fieldname = "way"
geometry_type = "Polygon"
sql = """
SELECT
    NULL AS osm_id,
    ST_AsBinary(ST_SimplifyPreserveTopology(way, pixel_size(!ZOOM!)*.25)) AS way
  FROM ocean_polygons
  WHERE way && !BBOX!
UNION ALL
SELECT
    osm_id,
    ST_AsBinary(ST_SimplifyPreserveTopology(way, pixel_size(!ZOOM!)*.25)) AS way
  FROM planet_osm_polygon
  WHERE way && !BBOX!
    AND (waterway = 'riverbank'
      OR landuse = 'reservoir'
      OR "natural" = 'water')
    AND way_area > pixel_area(!ZOOM!)*0.25
"""

[[providers.layers]]
name = "water_names"
geometry_fieldname = "way"
geometry_type = "Point"
sql = """
SELECT
    ST_AsBinary(ST_PointOnSurface(way)) AS way,
    osm_id,
    name,
    way_area AS area
  FROM planet_osm_polygon
  WHERE way && !BBOX!
    AND name IS NOT NULL
    AND (landuse = 'reservoir'
      OR "natural" = 'water')
    AND NOT water = 'river'
    AND way_area > pixel_area(!ZOOM!)*64*64
UNION ALL
SELECT
    ST_AsBinary(ST_RemoveRepeatedPoints(way,pixel_size(!ZOOM!)*0.25)) AS way,
    osm_id,
    name,
    NULL AS area
  FROM planet_osm_line
  WHERE way && !BBOX!
    AND name IS NOT NULL
    AND waterway = 'river'
"""

[[providers.layers]]
name = "ne_boundaries"
geometry_fieldname = "way"
geometry_type = "LineString"
sql = """
SELECT
    ST_AsBinary(ST_RemoveRepeatedPoints(way,pixel_size(!ZOOM!)*0.25)) AS way
  FROM ne_populated_places
  WHERE way && !BBOX!
"""

[[providers.layers]]
name = "lz_boundaries"
geometry_fieldname = "way"
geometry_type = "LineString"
# The SQL for boundaries is fairly complex because it deduplicates overlapping
# lines, To do this, the boundary linestrings need to be turned into two-point
# segments, distinct segments found, and then the result rebuilt into longer
# linestrings. Tegola #559 prevents the use of CTEs, so this needs to be done
# with nested subselects which are messier.
# References:
# - http://blog.cleverelephant.ca/2015/02/breaking-linestring-into-segments.html
sql = """
SELECT
    ST_AsBinary(ST_RemoveRepeatedPoints(ST_LineMerge(ST_Collect(way)), pixel_size(!ZOOM!)*0.25)) AS way,
    admin_level::integer,
    osm_id
  FROM
  (SELECT
      DISTINCT ON (way) -- Select only one of the overlapping geoms
      way,
      admin_level::integer,
      osm_id
    FROM
    (SELECT
        ST_MakeLine(
          lag((pt).geom) OVER (PARTITION BY ctid ORDER BY ctid, (pt).path),
          (pt).geom) AS way, -- This makes a line between the previous point and the next one
        admin_level::integer,
        osm_id
      FROM
      (SELECT
          ctid,
          ST_DumpPoints(way) AS pt,
          admin_level::integer,
          osm_id
        FROM
        (SELECT -- The innermost select just gets the admin boundaries
            ctid, -- ctid is kept around as a unique id because osm_id is not unique with long line splitting
            way,
            admin_level::integer,
            osm_id
          FROM planet_osm_roads
          WHERE way && !BBOX!
            AND boundary = 'administrative'
            AND admin_level IN ('0', '1', '2', '3', '4')
            AND osm_id < 0
        ) boundaries
      ) AS dumps
    ) AS segments
    WHERE way IS NOT NULL
    ORDER BY
      way,
      admin_level,
      osm_id
  ) AS deduplicated_segments
  GROUP BY
    osm_id,
    admin_level
"""

[[providers.layers]]
name = "cities"
geometry_fieldname = "way"
geometry_type = "Point"
sql = """
SELECT
    ST_AsBinary(way) AS way,
    osm_id,
    name,
    place
  FROM planet_osm_point
  WHERE way && !BBOX!
    AND (place = 'city'
      OR place = 'town' AND 8 < !ZOOM!
      OR place = 'village' AND 10 < !ZOOM!
      OR place = 'hamlet' AND 12 < !ZOOM!)
    AND name IS NOT NULL
"""

[[providers.layers]]
name = "lz_transport"
geometry_fieldname = "way"
geometry_type = "LineString"
sql = """
SELECT
    ST_AsBinary(ST_Union(ST_RemoveRepeatedPoints(way, pixel_size(!ZOOM!)*0.25))) AS way,
    name,
    ref,
    highway AS class,
    FALSE AS link
  FROM planet_osm_roads
  WHERE way && !BBOX!
    AND (highway IN ('motorway')
      OR highway IN ('motorway', 'trunk') AND !ZOOM! >=6
      OR highway IN ('motorway', 'trunk', 'primary') AND !ZOOM! >=8
      OR highway IN ('motorway', 'trunk', 'primary', 'secondary') AND !ZOOM! >=9
      OR railway IN ('rail', 'narrow_gague', 'funicular')
        AND (service IS NULL OR service NOT IN ('spur', 'siding', 'yard'))
        AND !ZOOM! >=9)
    GROUP BY name, ref, highway
"""

[[providers.layers]]
name = "transport_z10"
geometry_fieldname = "way"
geometry_type = "LineString"
sql = """
SELECT
    ST_AsBinary(way) AS way,
    osm_id,
    name,
    ref,
    CASE WHEN substr(highway, length(highway)-4, 5) = '_link' THEN substr(highway, 0, length(highway)-4) ELSE highway END AS class, -- strip link
    railway,
    substr(highway, length(highway)-4, 5) = '_link' AS link
  FROM planet_osm_line
  WHERE way && !BBOX!
    AND (highway IN ('motorway', 'motorway_link', 'trunk', 'trunk_link', 'primary', 'primary_link',
                      'secondary', 'secondary_link', 'tertiary', 'tertiary_link')
      OR railway IN ('rail', 'narrow_gague', 'funicular')
      AND (service IS NULL OR service NOT IN ('spur', 'siding', 'yard')))
"""

[[providers.layers]]
name = "transport_z12"
geometry_fieldname = "way"
sql = """
SELECT
    ST_AsBinary(way) AS way,
    osm_id,
    name,
    ref,
    CASE WHEN substr(highway, length(highway)-4, 5) = '_link' THEN substr(highway, 0, length(highway)-4) ELSE highway END AS class, -- strip link
    railway,
    service,
    substr(highway, length(highway)-4, 5) = '_link' AS link
  FROM planet_osm_line
  WHERE way && !BBOX!
    AND (highway IN ('motorway', 'motorway_link', 'trunk', 'trunk_link', 'primary', 'primary_link',
                    'secondary', 'secondary_link', 'tertiary', 'tertiary_link', 'unclassified', 'residential')
      OR railway IN ('rail', 'narrow_gague', 'funicular'))
"""

[[providers.layers]]
name = "buildings_z13"
geometry_fieldname = "way"
sql = """
SELECT
    ST_AsBinary(way) AS way,
    osm_id
  FROM planet_osm_polygon
  WHERE way && !BBOX!
    AND building IS NOT NULL
    AND building != 'no'
"""

[[providers.layers]]
name = "forests"
geometry_fieldname = "way"
geometry_type = "Polygon"
sql = """
SELECT
    ST_AsBinary(way) AS way,
    osm_id
  FROM planet_osm_polygon
  WHERE way && !BBOX!
    AND (landuse = 'forest' OR "natural" = 'wood')
    AND way_area > pixel_area(!ZOOM!)*0.25
"""
[[providers.layers]]
name = "parks"
geometry_fieldname = "way"
geometry_type = "Polygon"
sql = """
SELECT
    ST_AsBinary(way) AS way,
    osm_id
  FROM planet_osm_polygon
  WHERE way && !BBOX!
    AND (leisure = 'park')
    AND way_area > pixel_area(!ZOOM!)*0.25
"""

[[providers.layers]]
name = "regional_parks"
geometry_fieldname = "way"
geometry_type = "Polygon"
sql = """
SELECT
    ST_AsBinary(way) AS way,
    osm_id
  FROM planet_osm_polygon
  WHERE way && !BBOX!
    AND (boundary = 'national_park' OR leisure = 'nature_reserve')
    AND way_area > pixel_area(!ZOOM!)*0.25
"""

[[providers.layers]]
name = "landuse"
geometry_fieldname = "way"
geometry_type = "Polygon"
sql = """
SELECT
    ST_AsBinary(way) AS way,
    osm_id,
    landuse
  FROM planet_osm_polygon
  WHERE way && !BBOX!
    AND (landuse IN ('retail', 'commercial', 'industrial', 'railway'))
    AND way_area > pixel_area(!ZOOM!)*0.25
"""

[[providers.layers]]
name = "poi_areas"
geometry_fieldname = "way"
geometry_type = "Polygon"
sql = """
SELECT
    ST_AsBinary(way) AS way,
    osm_id,
    amenity
  FROM planet_osm_polygon
  WHERE way && !BBOX!
    AND (amenity IN ('hospital', 'school', 'college', 'university'))
    AND way_area > pixel_area(!ZOOM!)*0.25
"""

[[maps]]
name = "bolder"

[[maps.layers]]
name = "water"
provider_layer = "osm2pgsql.ne_water"
min_zoom = 0
max_zoom = 5
[[maps.layers]]
name = "water"
provider_layer = "osm2pgsql.lz_water"
min_zoom = 6
max_zoom = 9
[[maps.layers]]
name = "water"
provider_layer = "osm2pgsql.water"
min_zoom = 10

[[maps.layers]]
name = "water_names"
provider_layer = "osm2pgsql.water_names"
min_zoom = 10

[[maps.layers]]
name = "boundaries"
provider_layer = "osm2pgsql.ne_boundaries"
min_zoom = 0
max_zoom = 3
[[maps.layers]]
name = "boundaries"
provider_layer = "osm2pgsql.lz_boundaries"
min_zoom = 4
max_zoom = 15

[[maps.layers]]
name = "forests"
provider_layer = "osm2pgsql.forests"
min_zoom = 7
max_zoom = 15

[[maps.layers]]
name = "parks"
provider_layer = "osm2pgsql.parks"
min_zoom = 12
max_zoom = 15

[[maps.layers]]
name = "landuse"
provider_layer = "osm2pgsql.landuse"
min_zoom = 12
max_zoom = 15

[[maps.layers]]
name = "poi_areas"
provider_layer = "osm2pgsql.poi_areas"
min_zoom = 12
max_zoom = 15

[[maps.layers]]
name = "buildings"
provider_layer = "osm2pgsql.buildings_z13"
min_zoom = 13
max_zoom = 15

[[maps.layers]]
name = "cities"
provider_layer = "osm2pgsql.cities"
min_zoom = 6
max_zoom = 15

[[maps.layers]]
name = "transport"
provider_layer = "osm2pgsql.lz_transport"
min_zoom = 5
max_zoom = 9
[[maps.layers]]
name = "transport"
provider_layer = "osm2pgsql.transport_z10"
min_zoom = 10
max_zoom = 11
[[maps.layers]]
name = "transport"
provider_layer = "osm2pgsql.transport_z12"
min_zoom = 12
max_zoom = 15
